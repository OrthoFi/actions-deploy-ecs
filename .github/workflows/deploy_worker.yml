name: Deploy
on:
  workflow_call:
    inputs:
      container-name: 
        description: Name of the container to update from the task definition
        required: true
        type: string

      ecs-task-definition-template-suffix:
        default: true
        description: Task definition name has '-template' suffix to separate history of deployments, set 'false' for older style ECS deployments not using task definition templates
        required: false
        type: boolean

      environment-name:
        description: Name of the environment to deploy to e.g. risk, dev, production
        required: true
        type: string

      image:
        description: Name of the image e.g. skynet
        required: false
        type: string

      image-tag-suffix:
        description: The image tag suffix e.g. -arm
        required: false
        type: string

      service-name:
        description: Name of the service e.g. skynet, event-publisher
        required: false
        type: string

defaults:
  run:
    shell: pwsh

jobs:
  deploy:
    name: Deploy
    runs-on: ['self-hosted','linux','x64']
    environment: ${{ format('{0}-{1}', inputs.environment-name, inputs.service-name) }}
    concurrency: ${{ format('{0}-{1}', inputs.environment-name, inputs.service-name) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get latest successful build SHA
        id: sha
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract the repository owner and name from the environment variable
          $repoInfo = $env:GITHUB_REPOSITORY -split "/"
          $owner = $repoInfo[0]
          $repo = $repoInfo[1]

          $branch = $env:GITHUB_REF -replace "refs/heads/", ""

          # Set the API endpoint URL with the branch name
          $apiUrl = "https://api.github.com/repos/$owner/$repo/actions/workflows/build.yml/runs?status=success&branch=$branch"

          # Make the API request
          $response = Invoke-RestMethod -Uri $apiUrl -Headers @{
            "Authorization" = "Bearer $env:GITHUB_TOKEN"
          }

          # Extract the SHA from the most recent successful run
          $latestSuccessSha = $response.workflow_runs[0].head_sha

          # Set the SHA as an output variable
          echo "sha=$latestSuccessSha" >> $env:GITHUB_OUTPUT

      - name: Configure Shared Services AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.BUILD_AWS_SHARED_SERVICES_ROLE }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Double Check Image Availability
        shell: pwsh
        run: |
          $imageTag = "sha-${{ steps.sha.outputs.sha }}${{ inputs.image-tag-suffix }}"
          $repositoryName = "${{ inputs.image }}"
          
          try {
            $result = aws ecr describe-images --repository-name $repositoryName --image-ids imageTag=$imageTag
            if ($result) { Write-Host "Image $imageTag is available in ECR, proceeding with deployment" }
          }
          catch {
            Write-Host "Image $imageTag is not available in ECR"
            Write-Host "Trigger another build and deploy to resolve this"
            exit 1
          }

      - name: Configure Env Specific AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ vars.AWS_BUILD_ROLE }}

      - name: Download Task Definition
        run: aws ecs describe-task-definition --task-definition ${{ format('{0}-{1}', inputs.environment-name, inputs.service-name) }}${{ inputs.ecs-task-definition-template-suffix && '-template' || '' }} --query taskDefinition > task-definition.json

      - name: Render New Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.container-name }}
          image: "655438670330.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.image }}:sha-${{ steps.sha.outputs.sha }}${{ inputs.image-tag-suffix }}"
          environment-variables: |
            GIT__BUILD_NUMBER=${{ github.build_number }}
            GIT__REF=${{ github.ref }}
            GIT__SHA=${{ steps.sha.outputs.sha }}
            DD_VERSION=sha-${{ steps.sha.outputs.sha }}
            OTEL_RESOURCE_ATTRIBUTES=deployment.environment=${{ inputs.environment-name }},service.version=sha-${{ steps.sha.outputs.sha }}

      - name: Sanitize Fields for New Task Definition
        run: |
          $filePath = "${{ steps.task-def.outputs.task-definition }}"

          $taskDefinition = ConvertFrom-Json($(Get-Content -Path $filePath) -join '') -AsHashtable

          $taskDefinition.Remove("compatibilities")
          $taskDefinition.Remove("taskDefinitionArn")
          $taskDefinition.Remove("requiresAttributes")
          $taskDefinition.Remove("revision")
          $taskDefinition.Remove("status")
          $taskDefinition.Remove("registeredAt")
          $taskDefinition.Remove("registeredBy")

          $taskDefinition["family"] = $taskDefinition["family"].Replace("-template", "")

          $labels = $taskDefinition.containerDefinitions[0].dockerLabels

          if (-not $labels) {
              $labels = @{}
              $taskDefinition.containerDefinitions[0].dockerLabels = $labels
          }

          $labels["com.datadoghq.tags.version"] = "sha-${{ steps.sha.outputs.sha }}"

          ConvertTo-Json $taskDefinition -Depth 100 | Out-File $filePath

      - name: Deploy Task Definition
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ format('{0}-{1}', inputs.environment-name, inputs.service-name) }}
          cluster: ${{ inputs.environment-name }}
          wait-for-service-stability: true

      - name: Set up Python
        if: ${{ always() && github.ref_name == 'main' && inputs.environment-name == 'production' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
  
      - name: Pip Install
        if: ${{ always() && github.ref_name == 'main' && inputs.environment-name == 'production' }}
        run: pip install requests

      - name: Mark Deployment In Jellyfish
        if: ${{ always() && github.ref_name == 'main' && inputs.environment-name == 'production' }}
        run: |
          import requests
          import json
          import datetime

          url ='https://webhooks.jellyfish.co/deployment'
          headers = {'X-jf-api-token': '${{ secrets.JELLYFISH_API_TOKEN }}', 'Content-Type': 'application/json', 'X-jf-api-dry-run': 'false'}

          is_successful = False
          if '${{ steps.deploy.outcome }}' == 'success':
              is_successful = True

          data = {
              "commit_shas": ['${{ github.sha }}'],
              "deployed_at": datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'),
              "is_successful": is_successful,
              "labels": [f"environment:${{ inputs.environment }}", f"service:${{ inputs.app-name }}", "platform:ecs"],
              "name": '${{ github.repository }}-deploy-${{ github.run_number }}',
              "reference_id": '${{ github.repository }}-deploy-${{ github.run_number }}-${{ github.sha }}',
              "repo_name": '${{ github.repository }}',
          }

          r = requests.post(url, headers=headers, data=json.dumps(data))
        shell: python
