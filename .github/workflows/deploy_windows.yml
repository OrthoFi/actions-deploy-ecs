name: Deploy Windows
on:
  workflow_call:
    inputs:
      appspec-name:
        default: appspec.json
        description: Name of the appspec file
        required: false
        type: string

      app-name:
        description: Name of the name e.g. patient, user, practice, gateway
        required: true
        type: string

      code-deploy-deployment-strategy:
        description: Deployment strategy to use for CodeDeploy
        required: false
        type: string

      code-deploy-retain-previous-version-duration-minutes:
        description: Duration in minutes to retain previous running version of tasks in ECS for easy rollback
        required: false
        type: number

      environment:
        description: Name of the environment to deploy to e.g. risk, dev, production
        required: true
        type: string

      wait-for-service-stability:
        default: true
        description: Wait for ECS service to stabilize on new version before marking deployment as successful
        required: false
        type: boolean

jobs:
  deploy:
    name: Deploy
    runs-on: ['self-hosted','linux','x64']
    environment: ${{ github.event.inputs.environment }}-beanstalk
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get latest successful build SHA
        id: sha
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract the repository owner and name from the environment variable
          $repoInfo = $env:GITHUB_REPOSITORY -split "/"
          $owner = $repoInfo[0]
          $repo = $repoInfo[1]

          $branch = $env:GITHUB_REF -replace "refs/heads/", ""

          # Set the API endpoint URL with the branch name
          $apiUrl = "https://api.github.com/repos/$owner/$repo/actions/workflows/build.yml/runs?status=success&branch=$branch"

          # Make the API request
          $response = Invoke-RestMethod -Uri $apiUrl -Headers @{
            "Authorization" = "Bearer $env:GITHUB_TOKEN"
          }

          # Extract the SHA from the most recent successful run
          $latestSuccessSha = $response.workflow_runs[0].head_sha

          # Set the SHA as an output variable
          echo "sha=$latestSuccessSha" >> $env:GITHUB_OUTPUT

      - name: Add AfterAllowTestTraffic Lambda
        shell: pwsh
        run: |
          $content = Get-Content "./${{ inputs.appspec-name }}" | ConvertFrom-Json

          if ($null -eq $content.Hooks) {
              Add-Member -InputObject $content -NotePropertyName "Hooks" -NotePropertyValue @()
          }

          $newHook = New-Object PSObject -Property @{ 
              "AfterAllowTestTraffic" = "${{ github.event.inputs.environment }}-common-codeDeployTestTraffic"
          }

          $content.Hooks += $newHook

          $content | ConvertTo-Json -Depth 100 | Set-Content "./${{ inputs.appspec-name }}"

      - name: Configure Shared Services AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.BUILD_AWS_SHARED_SERVICES_ROLE }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Double Check Image Availability
        shell: pwsh
        run: |
          $imageTag = "sha-${{ steps.sha.outputs.sha }}"
          $repositoryName = "${{ inputs.app-name }}"
          
          try {
            $result = aws ecr describe-images --repository-name $repositoryName --image-ids imageTag=$imageTag
            if ($result) { Write-Host "Image $imageTag is available in ECR, proceeding with deployment" }
          }
          catch {
            Write-Host "Image $imageTag is not available in ECR"
            Write-Host "Trigger another build and deploy to resolve this"
            exit 1
          }

      - name: Configure Env Specific AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 28800 # 8 hours
          role-to-assume: ${{ vars.AWS_BUILD_ROLE }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download Task Definition
        shell: bash
        run: aws ecs describe-task-definition --task-definition ${{ inputs.environment }}-${{ inputs.app-name }} --query taskDefinition > task-definition.json

      - name: Sanitize Task Definition
        shell: pwsh
        run: |
          $taskDefinition = ConvertFrom-Json($(Get-Content -Path task-definition.json) -join '') -AsHashtable

          $taskDefinition.Remove("compatibilities")
          $taskDefinition.Remove("taskDefinitionArn")
          $taskDefinition.Remove("requiresAttributes")
          $taskDefinition.Remove("revision")
          $taskDefinition.Remove("status")
          $taskDefinition.Remove("registeredAt")
          $taskDefinition.Remove("registeredBy")

          ConvertTo-Json $taskDefinition -Depth 100 | Out-File task-definition.json

      - name: Update Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.app-name }}
          image: "655438670330.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.app-name }}:sha-${{ steps.sha.outputs.sha }}"
          environment-variables: |
            GIT__BUILD_NUMBER=${{ github.build_number }}
            GIT__REF=${{ github.ref }}
            GIT__SHA=${{ steps.sha.outputs.sha }}
            DD_VERSION=sha-${{ steps.sha.outputs.sha }}
            OTEL_RESOURCE_ATTRIBUTES=deployment.environment=${{ inputs.environment }},service.version=sha-${{ steps.sha.outputs.sha }}

      - name: Update Docker Labels
        shell: pwsh
        run: |
          $filePath = "${{ steps.task-def.outputs.task-definition }}"
          $taskDefinition = ConvertFrom-Json($(Get-Content -Path $filePath) -join '') -AsHashtable
          $labels = $taskDefinition.containerDefinitions[0].dockerLabels
          if (-not $labels) {
              $labels = @{}
          }
          $labels["com.datadoghq.tags.version"] = "sha-${{ steps.sha.outputs.sha }}"
          ConvertTo-Json $taskDefinition -Depth 100 | Out-File $filePath

      - name: Update AWS CodeDeploy Deployment Strategy & Previous Version Retention Time
        shell: pwsh
        run: |
          switch ("${{ github.event.inputs.code-deploy-deployment-strategy }}") {
            "Immediately" {
              Write-Host "Desired deployment is immediate (standard blue/green), using CodeDeployDefault.ECSAllAtOnce"
              $deploymentStrategy = "CodeDeployDefault.ECSAllAtOnce"
            }
            "10% For 20 Minutes" {
              Write-Host "Desired deployment is canary 10% of traffic for 20 minutes, using ECS10Percent20Minutes"
              $deploymentStrategy = "ECS10Percent20Minutes"
            }
            "10% For 1 Hour" {
              Write-Host "Desired deployment is canary 10% of traffic for 1 hour, using ECS10Percent60Minutes"
              $deploymentStrategy = "ECS10Percent60Minutes"
            }
            "10% For 3 Hours" {
              Write-Host "Desired deployment is canary 10% of traffic for 3 hours, using ECS10Percent180Minutes"
              $deploymentStrategy = "ECS10Percent180Minutes"
            }
            default {
              Write-Host "Desired deployment strategy was not specified as a workflow input, defaulting to immediate deploy using CodeDeployDefault.ECSAllAtOnce"
              Write-Host "This is expected in non-production environments where deployments are auto-triggered"
              $deploymentStrategy = "CodeDeployDefault.ECSAllAtOnce"
            }
          }
          $retainPreviousVersionDurationMinutes = "${{ github.event.inputs.code-deploy-retain-previous-version-duration-minutes }}"
          if ([string]::IsNullOrEmpty($retainPreviousVersionDurationMinutes)) {
            if ("${{ inputs.environment }}" -eq "production") {
                $retainPreviousVersionDurationMinutes = 5
            } else {
                $retainPreviousVersionDurationMinutes = 1
            }
          }
          Write-Host "Previous version retention time is $retainPreviousVersionDurationMinutes minutes"
          Write-Host "Cancel this job while its still running to rollback the deployment to the previous version"
          
          aws deploy update-deployment-group `
          --application-name "${{ inputs.environment }}-${{ inputs.app-name }}" `
          --current-deployment-group-name "${{ inputs.environment }}-${{ inputs.app-name }}" `
          --deployment-config-name "$deploymentStrategy" `
          --blue-green-deployment-configuration @"
          {
            "terminateBlueInstancesOnDeploymentSuccess": {
              "action": "TERMINATE",
              "terminationWaitTimeInMinutes": $retainPreviousVersionDurationMinutes
            },
            "deploymentReadyOption": {
              "actionOnTimeout": "CONTINUE_DEPLOYMENT",
              "waitTimeInMinutes": 0
            }
          }
          "@

      - name: Deploy Amazon ECS Task Definition
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.environment }}-${{ inputs.app-name }}
          cluster: ${{ inputs.environment }}
          codedeploy-appspec: ${{ inputs.appspec-name }}
          codedeploy-application: ${{ inputs.environment }}-${{ inputs.app-name }}
          codedeploy-deployment-group: ${{ inputs.environment }}-${{ inputs.app-name }}
          wait-for-service-stability: ${{ inputs.wait-for-service-stability }}

      - name: (If Job Cancelled) Check For and Rollback Active Deployment
        if: cancelled()
        run: |
          # PowerShell script to check for active deployment and cancel it
          $appAndDeploymentGroupId = "${{ inputs.environment }}-${{ inputs.app-name }}"
          $deploymentInfo = aws deploy list-deployments --application-name $appAndDeploymentGroupId --deployment-group-name $appAndDeploymentGroupId --include-only-statuses "InProgress" | ConvertFrom-Json
          if ($deploymentInfo.deployments -and $deploymentInfo.deployments.Count -gt 0) {
            $activeDeploymentId = $deploymentInfo.deployments[0]
            aws deploy stop-deployment --deployment-id $activeDeploymentId --auto-rollback-enabled
            Write-Output "Deployment $activeDeploymentId has been stopped and rolled back."
          } else {
            Write-Output "No active deployments found, therefore no rollback to perform."
          }
        shell: pwsh

      - name: Fetch Logs From Latest Deploy
        id: fetch-logs
        if: always()
        run: |
          $envAppPath = "/ecs/${{ inputs.environment }}/${{ inputs.app-name }}"
          $latestLogStreams = aws logs describe-log-streams --log-group-name $envAppPath --order-by "LastEventTime" --descending --limit 10 | ConvertFrom-Json
          $filteredLogStreams = $latestLogStreams.logStreams | Where-Object { $_.logStreamName -like "app-container*" }
          if ($filteredLogStreams.Count -gt 0) {
            $sortedLogStreams = $filteredLogStreams | Sort-Object -Property creationTime -Descending
            $logStreamName = $sortedLogStreams[0].logStreamName
            $logContents = aws logs get-log-events --log-group-name $envAppPath --log-stream-name $logStreamName --start-from-head | ConvertFrom-Json
            $logEvents = $logContents.events | ForEach-Object { $_.message }
            $logEvents | Out-File -FilePath "latest-ecs-task.log"
            Write-Output ""
            Write-Output "Below are the logs from the latest ECS task:"
            Write-Output "=========================================================="
            $logEvents | Write-Output
            Write-Output "=========================================================="
            Write-Output "END LOGS FROM LATEST ECS TASK"
            Write-Output "=========================================================="
            Write-Output ""
            Write-Output "Log contents have also been saved to latest-ecs-task.log"
            Write-Output "And are attached to this workflow run."
            Write-Output ""
            Write-Output "Not seeing any logs from the application?"
            Write-Output "Binding redirects can also be a cause of failed deployments."
            Write-Output "They are usually associated with a failed deploy but with no errors"
            Write-Output "or other entries of note in the logs."
            Write-Output ""
            Write-Output "You can retry the deploy and watch the CodeDeploy deployment, wait for it"
            Write-Output "to complete the 'Test Traffic Route Setup' step. As soon as that step completes"
            Write-Output "you can hit your application at http://the-url-to-your-application.com:8080/health"
            Write-Output "This is a good way to track down binding redirect issues."
            Write-Output ""
            Write-Output "log-found=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Output ""
            Write-Output "No logs were found in the log stream for the latest deployment,"
            Write-Output "this may imply that there was an issue starting the new ECS tasks up"
            Write-Output "during deployment. You should investigate this by looking over the"
            Write-Output "task itself in the ECS console to try to see if there are any errors there."
            Write-Output "It could be something like a missing image, or broken ECS task definition"
            Write-Output "configuration."
            Write-Output ""
          }
        shell: pwsh

      - name: Upload Log File
        if: always() && steps.fetch-logs.outputs.log-found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: latest-ecs-task-logs
          path: latest-ecs-task.log

      - name: Fetch Logs from AfterAllowTestTraffic Lambda
        if: always()
        run: |
          $deploymentId = "${{ steps.deploy.outputs.codedeploy-deployment-id }}"
          if (-not $deploymentId) {
            Write-Output "No CodeDeploy deployment ID found."
            Write-Output "It's likely that the deploy failed to start, see the CodeDeploy console for more information."
            exit 1
          }

          Write-Host "Looking for logs from AfterAllowTestTraffic Lambda for CodeDeploy Deployment ID $deploymentId"
          Write-Host "This can take a couple minutes, please be patient."
          $logGroupName = "/aws/lambda/${{ inputs.environment }}-common-codeDeployTestTraffic"
          $filterPattern = "{ $.deploymentInfo.deploymentId = $deploymentId }"
          $startTime = [int64]((Get-Date).AddHours(-2).ToUniversalTime() - (Get-Date "1970-01-01T00:00:00Z").ToUniversalTime()).TotalMilliseconds
          $logStreamResult = $null
          $endTime = (Get-Date).AddMinutes(2)
          
          while ((Get-Date) -lt $endTime) {
            $logStreamResult = $(aws logs filter-log-events `
            --log-group-name $logGroupName `
            --filter-pattern $filterPattern `
            --start-time $startTime `
            --limit 1) | ConvertFrom-Json

            if ($logStreamResult.events.Count -gt 0) {
              break
            }
          Start-Sleep -Seconds 5
          }

          if ($logStreamResult.events.Count -eq 0) {
          Write-Host "No Lambda logs found for CodeDeploy Deployment ID $deploymentId"
          exit 1
          }

          $logStreamName = $logStreamResult.events[0].logStreamName
          Write-Host "Log Stream Found: $logStreamName"

          $logContents = aws logs get-log-events `
            --log-group-name $logGroupName `
            --log-stream-name $logStreamName `
            --start-from-head | ConvertFrom-Json
          $logEvents = $logContents.events | ForEach-Object { $_.message }
          $logEvents | Out-File -FilePath "after-allow-test-traffic-lambda.log"

          Write-Output ""
          Write-Output "Below are the logs from the CodeDeploy AfterAllowTestTraffic Lambda:"
          Write-Output "=========================================================="
          $logEvents | Write-Output
          Write-Output "=========================================================="
          Write-Output "END LOGS FROM AFTERALLOWTESTTRAFFIC LAMBDA"
          Write-Output "=========================================================="
          Write-Output ""
        shell: pwsh
  
      - name: Upload Lambda Log File
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: after-allow-test-traffic-lambda-logs
          path: after-allow-test-traffic-lambda.log

      - name: Set up Python
        if: ${{ always() && github.ref_name == 'main' && inputs.environment == 'production' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
  
      - name: Pip Install
        if: ${{ always() && github.ref_name == 'main' && inputs.environment == 'production' }}
        run: pip install requests

      - name: Mark Deployment In Jellyfish
        if: ${{ always() && github.ref_name == 'main' && inputs.environment == 'production' }}
        run: |
          import requests
          import json
          import datetime

          url ='https://webhooks.jellyfish.co/deployment'
          headers = {'X-jf-api-token': '${{ secrets.JELLYFISH_API_TOKEN }}', 'Content-Type': 'application/json', 'X-jf-api-dry-run': 'false'}

          is_successful = False
          if '${{ steps.deploy.outcome }}' == 'success':
              is_successful = True

          data = {
              "commit_shas": ['${{ github.sha }}'],
              "deployed_at": datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'),
              "is_successful": is_successful,
              "labels": [f"environment:${{ inputs.environment }}", f"service:${{ inputs.app-name }}", "platform:ecs"],
              "name": '${{ github.repository }}-deploy-${{ github.run_number }}',
              "reference_id": '${{ github.repository }}-deploy-${{ github.run_number }}-${{ github.sha }}',
              "repo_name": '${{ github.repository }}',
          }

          r = requests.post(url, headers=headers, data=json.dumps(data))
        shell: python
